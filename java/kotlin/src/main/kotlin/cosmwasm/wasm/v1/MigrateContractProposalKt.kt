//Generated by the protocol buffer compiler. DO NOT EDIT!
// source: cosmwasm/wasm/v1/proposal.proto

package cosmwasm.wasm.v1;

@kotlin.jvm.JvmSynthetic
public inline fun migrateContractProposal(block: cosmwasm.wasm.v1.MigrateContractProposalKt.Dsl.() -> kotlin.Unit): cosmwasm.wasm.v1.Proposal.MigrateContractProposal =
  cosmwasm.wasm.v1.MigrateContractProposalKt.Dsl._create(cosmwasm.wasm.v1.Proposal.MigrateContractProposal.newBuilder()).apply { block() }._build()
public object MigrateContractProposalKt {
  @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
  @com.google.protobuf.kotlin.ProtoDslMarker
  public class Dsl private constructor(
    private val _builder: cosmwasm.wasm.v1.Proposal.MigrateContractProposal.Builder
  ) {
    public companion object {
      @kotlin.jvm.JvmSynthetic
      @kotlin.PublishedApi
      internal fun _create(builder: cosmwasm.wasm.v1.Proposal.MigrateContractProposal.Builder): Dsl = Dsl(builder)
    }

    @kotlin.jvm.JvmSynthetic
    @kotlin.PublishedApi
    internal fun _build(): cosmwasm.wasm.v1.Proposal.MigrateContractProposal = _builder.build()

    /**
     * <pre>
     * Title is a short summary
     * </pre>
     *
     * <code>string title = 1;</code>
     */
    public var title: kotlin.String
      @JvmName("getTitle")
      get() = _builder.getTitle()
      @JvmName("setTitle")
      set(value) {
        _builder.setTitle(value)
      }
    /**
     * <pre>
     * Title is a short summary
     * </pre>
     *
     * <code>string title = 1;</code>
     */
    public fun clearTitle() {
      _builder.clearTitle()
    }

    /**
     * <pre>
     * Description is a human readable text
     * </pre>
     *
     * <code>string description = 2;</code>
     */
    public var description: kotlin.String
      @JvmName("getDescription")
      get() = _builder.getDescription()
      @JvmName("setDescription")
      set(value) {
        _builder.setDescription(value)
      }
    /**
     * <pre>
     * Description is a human readable text
     * </pre>
     *
     * <code>string description = 2;</code>
     */
    public fun clearDescription() {
      _builder.clearDescription()
    }

    /**
     * <pre>
     * Contract is the address of the smart contract
     * </pre>
     *
     * <code>string contract = 4;</code>
     */
    public var contract: kotlin.String
      @JvmName("getContract")
      get() = _builder.getContract()
      @JvmName("setContract")
      set(value) {
        _builder.setContract(value)
      }
    /**
     * <pre>
     * Contract is the address of the smart contract
     * </pre>
     *
     * <code>string contract = 4;</code>
     */
    public fun clearContract() {
      _builder.clearContract()
    }

    /**
     * <pre>
     * CodeID references the new WASM code
     * </pre>
     *
     * <code>uint64 code_id = 5 [(.gogoproto.customname) = "CodeID"];</code>
     */
    public var codeId: kotlin.Long
      @JvmName("getCodeId")
      get() = _builder.getCodeId()
      @JvmName("setCodeId")
      set(value) {
        _builder.setCodeId(value)
      }
    /**
     * <pre>
     * CodeID references the new WASM code
     * </pre>
     *
     * <code>uint64 code_id = 5 [(.gogoproto.customname) = "CodeID"];</code>
     */
    public fun clearCodeId() {
      _builder.clearCodeId()
    }

    /**
     * <pre>
     * Msg json encoded message to be passed to the contract on migration
     * </pre>
     *
     * <code>bytes msg = 6 [(.gogoproto.casttype) = "RawContractMessage"];</code>
     */
    public var msg: com.google.protobuf.ByteString
      @JvmName("getMsg")
      get() = _builder.getMsg()
      @JvmName("setMsg")
      set(value) {
        _builder.setMsg(value)
      }
    /**
     * <pre>
     * Msg json encoded message to be passed to the contract on migration
     * </pre>
     *
     * <code>bytes msg = 6 [(.gogoproto.casttype) = "RawContractMessage"];</code>
     */
    public fun clearMsg() {
      _builder.clearMsg()
    }
  }
}
@kotlin.jvm.JvmSynthetic
public inline fun cosmwasm.wasm.v1.Proposal.MigrateContractProposal.copy(block: cosmwasm.wasm.v1.MigrateContractProposalKt.Dsl.() -> kotlin.Unit): cosmwasm.wasm.v1.Proposal.MigrateContractProposal =
  cosmwasm.wasm.v1.MigrateContractProposalKt.Dsl._create(this.toBuilder()).apply { block() }._build()
