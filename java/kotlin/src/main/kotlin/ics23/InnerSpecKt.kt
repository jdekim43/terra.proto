//Generated by the protocol buffer compiler. DO NOT EDIT!
// source: confio/proofs.proto

package ics23;

@kotlin.jvm.JvmSynthetic
public inline fun innerSpec(block: ics23.InnerSpecKt.Dsl.() -> kotlin.Unit): ics23.Proofs.InnerSpec =
  ics23.InnerSpecKt.Dsl._create(ics23.Proofs.InnerSpec.newBuilder()).apply { block() }._build()
public object InnerSpecKt {
  @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
  @com.google.protobuf.kotlin.ProtoDslMarker
  public class Dsl private constructor(
    private val _builder: ics23.Proofs.InnerSpec.Builder
  ) {
    public companion object {
      @kotlin.jvm.JvmSynthetic
      @kotlin.PublishedApi
      internal fun _create(builder: ics23.Proofs.InnerSpec.Builder): Dsl = Dsl(builder)
    }

    @kotlin.jvm.JvmSynthetic
    @kotlin.PublishedApi
    internal fun _build(): ics23.Proofs.InnerSpec = _builder.build()

    /**
     * An uninstantiable, behaviorless type to represent the field in
     * generics.
     */
    @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
    public class ChildOrderProxy private constructor() : com.google.protobuf.kotlin.DslProxy()
    /**
     * <pre>
     * Child order is the ordering of the children node, must count from 0
     * iavl tree is [0, 1] (left then right)
     * merk is [0, 2, 1] (left, right, here)
     * </pre>
     *
     * <code>repeated int32 child_order = 1;</code>
     */
     public val childOrder: com.google.protobuf.kotlin.DslList<kotlin.Int, ChildOrderProxy>
      @kotlin.jvm.JvmSynthetic
      get() = com.google.protobuf.kotlin.DslList(
        _builder.getChildOrderList()
      )
    /**
     * <pre>
     * Child order is the ordering of the children node, must count from 0
     * iavl tree is [0, 1] (left then right)
     * merk is [0, 2, 1] (left, right, here)
     * </pre>
     *
     * <code>repeated int32 child_order = 1;</code>
     * @param value The childOrder to add.
     */
    @kotlin.jvm.JvmSynthetic
    @kotlin.jvm.JvmName("addChildOrder")
    public fun com.google.protobuf.kotlin.DslList<kotlin.Int, ChildOrderProxy>.add(value: kotlin.Int) {
      _builder.addChildOrder(value)
    }/**
     * <pre>
     * Child order is the ordering of the children node, must count from 0
     * iavl tree is [0, 1] (left then right)
     * merk is [0, 2, 1] (left, right, here)
     * </pre>
     *
     * <code>repeated int32 child_order = 1;</code>
     * @param value The childOrder to add.
     */
    @kotlin.jvm.JvmSynthetic
    @kotlin.jvm.JvmName("plusAssignChildOrder")
    @Suppress("NOTHING_TO_INLINE")
    public inline operator fun com.google.protobuf.kotlin.DslList<kotlin.Int, ChildOrderProxy>.plusAssign(value: kotlin.Int) {
      add(value)
    }/**
     * <pre>
     * Child order is the ordering of the children node, must count from 0
     * iavl tree is [0, 1] (left then right)
     * merk is [0, 2, 1] (left, right, here)
     * </pre>
     *
     * <code>repeated int32 child_order = 1;</code>
     * @param values The childOrder to add.
     */
    @kotlin.jvm.JvmSynthetic
    @kotlin.jvm.JvmName("addAllChildOrder")
    public fun com.google.protobuf.kotlin.DslList<kotlin.Int, ChildOrderProxy>.addAll(values: kotlin.collections.Iterable<kotlin.Int>) {
      _builder.addAllChildOrder(values)
    }/**
     * <pre>
     * Child order is the ordering of the children node, must count from 0
     * iavl tree is [0, 1] (left then right)
     * merk is [0, 2, 1] (left, right, here)
     * </pre>
     *
     * <code>repeated int32 child_order = 1;</code>
     * @param values The childOrder to add.
     */
    @kotlin.jvm.JvmSynthetic
    @kotlin.jvm.JvmName("plusAssignAllChildOrder")
    @Suppress("NOTHING_TO_INLINE")
    public inline operator fun com.google.protobuf.kotlin.DslList<kotlin.Int, ChildOrderProxy>.plusAssign(values: kotlin.collections.Iterable<kotlin.Int>) {
      addAll(values)
    }/**
     * <pre>
     * Child order is the ordering of the children node, must count from 0
     * iavl tree is [0, 1] (left then right)
     * merk is [0, 2, 1] (left, right, here)
     * </pre>
     *
     * <code>repeated int32 child_order = 1;</code>
     * @param index The index to set the value at.
     * @param value The childOrder to set.
     */
    @kotlin.jvm.JvmSynthetic
    @kotlin.jvm.JvmName("setChildOrder")
    public operator fun com.google.protobuf.kotlin.DslList<kotlin.Int, ChildOrderProxy>.set(index: kotlin.Int, value: kotlin.Int) {
      _builder.setChildOrder(index, value)
    }/**
     * <pre>
     * Child order is the ordering of the children node, must count from 0
     * iavl tree is [0, 1] (left then right)
     * merk is [0, 2, 1] (left, right, here)
     * </pre>
     *
     * <code>repeated int32 child_order = 1;</code>
     */
    @kotlin.jvm.JvmSynthetic
    @kotlin.jvm.JvmName("clearChildOrder")
    public fun com.google.protobuf.kotlin.DslList<kotlin.Int, ChildOrderProxy>.clear() {
      _builder.clearChildOrder()
    }
    /**
     * <code>int32 child_size = 2;</code>
     */
    public var childSize: kotlin.Int
      @JvmName("getChildSize")
      get() = _builder.getChildSize()
      @JvmName("setChildSize")
      set(value) {
        _builder.setChildSize(value)
      }
    /**
     * <code>int32 child_size = 2;</code>
     */
    public fun clearChildSize() {
      _builder.clearChildSize()
    }

    /**
     * <code>int32 min_prefix_length = 3;</code>
     */
    public var minPrefixLength: kotlin.Int
      @JvmName("getMinPrefixLength")
      get() = _builder.getMinPrefixLength()
      @JvmName("setMinPrefixLength")
      set(value) {
        _builder.setMinPrefixLength(value)
      }
    /**
     * <code>int32 min_prefix_length = 3;</code>
     */
    public fun clearMinPrefixLength() {
      _builder.clearMinPrefixLength()
    }

    /**
     * <code>int32 max_prefix_length = 4;</code>
     */
    public var maxPrefixLength: kotlin.Int
      @JvmName("getMaxPrefixLength")
      get() = _builder.getMaxPrefixLength()
      @JvmName("setMaxPrefixLength")
      set(value) {
        _builder.setMaxPrefixLength(value)
      }
    /**
     * <code>int32 max_prefix_length = 4;</code>
     */
    public fun clearMaxPrefixLength() {
      _builder.clearMaxPrefixLength()
    }

    /**
     * <pre>
     * empty child is the prehash image that is used when one child is nil (eg. 20 bytes of 0)
     * </pre>
     *
     * <code>bytes empty_child = 5;</code>
     */
    public var emptyChild: com.google.protobuf.ByteString
      @JvmName("getEmptyChild")
      get() = _builder.getEmptyChild()
      @JvmName("setEmptyChild")
      set(value) {
        _builder.setEmptyChild(value)
      }
    /**
     * <pre>
     * empty child is the prehash image that is used when one child is nil (eg. 20 bytes of 0)
     * </pre>
     *
     * <code>bytes empty_child = 5;</code>
     */
    public fun clearEmptyChild() {
      _builder.clearEmptyChild()
    }

    /**
     * <pre>
     * hash is the algorithm that must be used for each InnerOp
     * </pre>
     *
     * <code>.ics23.HashOp hash = 6;</code>
     */
    public var hash: ics23.Proofs.HashOp
      @JvmName("getHash")
      get() = _builder.getHash()
      @JvmName("setHash")
      set(value) {
        _builder.setHash(value)
      }
    /**
     * <pre>
     * hash is the algorithm that must be used for each InnerOp
     * </pre>
     *
     * <code>.ics23.HashOp hash = 6;</code>
     */
    public fun clearHash() {
      _builder.clearHash()
    }
  }
}
@kotlin.jvm.JvmSynthetic
public inline fun ics23.Proofs.InnerSpec.copy(block: ics23.InnerSpecKt.Dsl.() -> kotlin.Unit): ics23.Proofs.InnerSpec =
  ics23.InnerSpecKt.Dsl._create(this.toBuilder()).apply { block() }._build()
