//Generated by the protocol buffer compiler. DO NOT EDIT!
// source: confio/proofs.proto

package ics23;

@kotlin.jvm.JvmSynthetic
public inline fun leafOp(block: ics23.LeafOpKt.Dsl.() -> kotlin.Unit): ics23.Proofs.LeafOp =
  ics23.LeafOpKt.Dsl._create(ics23.Proofs.LeafOp.newBuilder()).apply { block() }._build()
public object LeafOpKt {
  @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
  @com.google.protobuf.kotlin.ProtoDslMarker
  public class Dsl private constructor(
    private val _builder: ics23.Proofs.LeafOp.Builder
  ) {
    public companion object {
      @kotlin.jvm.JvmSynthetic
      @kotlin.PublishedApi
      internal fun _create(builder: ics23.Proofs.LeafOp.Builder): Dsl = Dsl(builder)
    }

    @kotlin.jvm.JvmSynthetic
    @kotlin.PublishedApi
    internal fun _build(): ics23.Proofs.LeafOp = _builder.build()

    /**
     * <code>.ics23.HashOp hash = 1;</code>
     */
    public var hash: ics23.Proofs.HashOp
      @JvmName("getHash")
      get() = _builder.getHash()
      @JvmName("setHash")
      set(value) {
        _builder.setHash(value)
      }
    /**
     * <code>.ics23.HashOp hash = 1;</code>
     */
    public fun clearHash() {
      _builder.clearHash()
    }

    /**
     * <code>.ics23.HashOp prehash_key = 2;</code>
     */
    public var prehashKey: ics23.Proofs.HashOp
      @JvmName("getPrehashKey")
      get() = _builder.getPrehashKey()
      @JvmName("setPrehashKey")
      set(value) {
        _builder.setPrehashKey(value)
      }
    /**
     * <code>.ics23.HashOp prehash_key = 2;</code>
     */
    public fun clearPrehashKey() {
      _builder.clearPrehashKey()
    }

    /**
     * <code>.ics23.HashOp prehash_value = 3;</code>
     */
    public var prehashValue: ics23.Proofs.HashOp
      @JvmName("getPrehashValue")
      get() = _builder.getPrehashValue()
      @JvmName("setPrehashValue")
      set(value) {
        _builder.setPrehashValue(value)
      }
    /**
     * <code>.ics23.HashOp prehash_value = 3;</code>
     */
    public fun clearPrehashValue() {
      _builder.clearPrehashValue()
    }

    /**
     * <code>.ics23.LengthOp length = 4;</code>
     */
    public var length: ics23.Proofs.LengthOp
      @JvmName("getLength")
      get() = _builder.getLength()
      @JvmName("setLength")
      set(value) {
        _builder.setLength(value)
      }
    /**
     * <code>.ics23.LengthOp length = 4;</code>
     */
    public fun clearLength() {
      _builder.clearLength()
    }

    /**
     * <pre>
     * prefix is a fixed bytes that may optionally be included at the beginning to differentiate
     * a leaf node from an inner node.
     * </pre>
     *
     * <code>bytes prefix = 5;</code>
     */
    public var prefix: com.google.protobuf.ByteString
      @JvmName("getPrefix")
      get() = _builder.getPrefix()
      @JvmName("setPrefix")
      set(value) {
        _builder.setPrefix(value)
      }
    /**
     * <pre>
     * prefix is a fixed bytes that may optionally be included at the beginning to differentiate
     * a leaf node from an inner node.
     * </pre>
     *
     * <code>bytes prefix = 5;</code>
     */
    public fun clearPrefix() {
      _builder.clearPrefix()
    }
  }
}
@kotlin.jvm.JvmSynthetic
public inline fun ics23.Proofs.LeafOp.copy(block: ics23.LeafOpKt.Dsl.() -> kotlin.Unit): ics23.Proofs.LeafOp =
  ics23.LeafOpKt.Dsl._create(this.toBuilder()).apply { block() }._build()
